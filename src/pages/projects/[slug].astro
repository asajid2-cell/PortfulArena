---
import BaseLayout from '../../layouts/BaseLayout.astro';
import SectionHeader from '../../components/SectionHeader.astro';
import { ProjectCard } from '../../components/projects/ProjectCard.tsx';
import type { ArenaProject } from '../../lib/types';
import { getCollection, getEntryBySlug } from 'astro:content';

export async function getStaticPaths() {
  const projectEntries = await getCollection('projects');
  return projectEntries.map(({ slug }) => ({
    params: { slug },
    props: { slug }
  }));
}

const slug = Astro.props.slug ?? Astro.params.slug;

if (!slug) {
  throw new Error('Project slug missing.');
}

const projectEntry = await getEntryBySlug('projects', slug);

if (!projectEntry) {
  return Astro.redirect('/projects', 302);
}

const { Content } = await projectEntry.render();

const project: ArenaProject = {
  slug: projectEntry.slug,
  ...projectEntry.data,
  heroImage: projectEntry.data.heroImage ? projectEntry.data.heroImage.src : undefined
};

const relatedEntries = (await getCollection('projects'))
  .filter(({ slug: entrySlug }) => entrySlug !== projectEntry.slug)
  .map(({ slug: entrySlug, data }) => ({
    slug: entrySlug,
    ...data,
    heroImage: data.heroImage ? data.heroImage.src : undefined
  }))
  .sort((a, b) => (a.order ?? 99) - (b.order ?? 99))
  .slice(0, 3);
---

<BaseLayout title={`Portful | ${project.title}`} description={project.summary}>
  <section class="relative overflow-hidden border-b border-[color:var(--line-1)] bg-[color:var(--bg-1)]">
    <div class="mx-auto flex max-w-[1280px] flex-col gap-10 px-6 pb-16 pt-24 sm:px-12 sm:pb-20 sm:pt-32 lg:flex-row lg:gap-16 lg:px-16">
      <div class="flex-1 space-y-6">
        <p class="inline-flex items-center gap-2 rounded-full border border-[color:var(--line-1)] bg-[color:rgba(117,32,55,0.2)] px-4 py-2 text-xs uppercase tracking-[0.3em] text-[color:var(--pri-300)]">
          {project.category}
        </p>
        <h1 class="font-display text-4xl font-bold tracking-tight text-[color:var(--text-1)] sm:text-5xl">
          {project.title}
        </h1>
        <p class="max-w-2xl text-base text-[color:var(--text-2)]">
          {project.summary}
        </p>
        <div class="flex flex-wrap gap-3">
          {project.stack?.map((tech) => (
            <span class="rounded-full border border-[color:var(--line-1)] bg-[color:rgba(21,28,36,0.88)] px-3 py-1 text-xs uppercase tracking-[0.25em] text-[color:var(--text-3)]">
              {tech}
            </span>
          ))}
        </div>
      </div>
      <aside class="w-full max-w-[360px] space-y-6 rounded-[24px] border border-[color:var(--line-1)] bg-[color:rgba(21,28,36,0.86)] p-6 shadow-ambient lg:sticky lg:top-24">
        {project.role && (
          <div>
            <p class="text-xs uppercase tracking-[0.3em] text-[color:var(--text-3)]">Role</p>
            <p class="mt-1 text-sm text-[color:var(--text-1)]">{project.role}</p>
          </div>
        )}
        {project.outcome && (
          <div>
            <p class="text-xs uppercase tracking-[0.3em] text-[color:var(--text-3)]">Outcome</p>
            <p class="mt-1 text-sm text-[color:var(--text-2)]">{project.outcome}</p>
          </div>
        )}
        {project.metrics?.length ? (
          <div>
            <p class="text-xs uppercase tracking-[0.3em] text-[color:var(--text-3)]">Key metrics</p>
            <ul class="mt-2 space-y-2">
              {project.metrics.map((metric) => (
                <li class="flex items-baseline justify-between text-sm text-[color:var(--text-2)]">
                  <span>{metric.label}</span>
                  <span class="font-mono text-base text-[color:var(--pri-300)]">{metric.value}</span>
                </li>
              ))}
            </ul>
          </div>
        ) : null}
        {project.links?.length ? (
          <div>
            <p class="text-xs uppercase tracking-[0.3em] text-[color:var(--text-3)]">Links</p>
            <ul class="mt-2 space-y-2 text-sm">
              {project.links.map((link) => (
                <li>
                  <a href={link.href} target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-[color:var(--pri-400)]">
                    {link.label}
                    <span aria-hidden="true">-></span>
                  </a>
                </li>
              ))}
            </ul>
          </div>
        ) : null}
      </aside>
    </div>
  </section>

  <section class="border-b border-[color:var(--line-1)] bg-[color:var(--bg-0)]">
      <div class="mx-auto grid max-w-[960px] gap-12 px-6 py-16 sm:px-12 sm:py-20">
      <article class="prose prose-invert max-w-none">
        <Content />
      </article>
      <div class="grid gap-10 rounded-[24px] border border-[color:var(--line-1)] bg-[color:rgba(21,28,36,0.88)] p-10 shadow-ambient md:grid-cols-2">
        {project.problem && (
          <div>
            <h2 class="font-display text-xl text-[color:var(--text-1)]">Problem</h2>
            <p class="mt-3 text-sm text-[color:var(--text-2)]">{project.problem}</p>
          </div>
        )}
        {project.insight && (
          <div>
            <h2 class="font-display text-xl text-[color:var(--text-1)]">Insight</h2>
            <p class="mt-3 text-sm text-[color:var(--text-2)]">{project.insight}</p>
          </div>
        )}
        {project.approach && (
          <div>
            <h2 class="font-display text-xl text-[color:var(--text-1)]">Approach</h2>
            <p class="mt-3 text-sm text-[color:var(--text-2)]">{project.approach}</p>
          </div>
        )}
        {project.outcome && (
          <div>
            <h2 class="font-display text-xl text-[color:var(--text-1)]">Result</h2>
            <p class="mt-3 text-sm text-[color:var(--text-2)]">{project.outcome}</p>
          </div>
        )}
      </div>
    </div>
  </section>

  {relatedEntries.length ? (
    <section class="border-b border-[color:var(--line-1)] bg-[color:var(--bg-1)] py-24 sm:py-32">
      <div class="mx-auto flex max-w-[1280px] flex-col gap-12 px-6 sm:px-12 lg:px-16">
        <SectionHeader
          eyebrow="More work"
          title="Other projects to explore"
          description="A few more builds that keep the same mix of craft, care, and approachable motion."
        />
        <div class="grid gap-8 md:grid-cols-3">
          {relatedEntries.map((related, index) => (
            <ProjectCard project={related} index={index} client:visible />
          ))}
        </div>
      </div>
    </section>
  ) : null}
</BaseLayout>


